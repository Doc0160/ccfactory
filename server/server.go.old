package main

import (
	"ccfactory/old/server/factory"
	"net/http"

	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool { return true },
}

type ServerConfig struct {
	Port   string
	nextId int

	conns     map[string]*websocket.Conn
	respChans map[int]chan Response
}

func (c *ServerConfig) Start() {
	if c.Port == "" {
		c.Port = "1847"
	}
	c.conns = map[string]*websocket.Conn{}
	c.respChans = map[int]chan Response{}

	fs := http.FileServer(http.Dir("../client"))
	http.Handle("/", fs)

	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		conn, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			return
		}
		defer conn.Close()

		l := Login{}
		err = conn.ReadJSON(&l)
		if err != nil {
			log.Error(err)
			return
		}
		c.conns[l.Client] = conn
		log.Debug("Login ", "client", l.Client)

		/*go func() {
			//log.Debug(c.LogMessage(conn, "test", 6))
			s := c.CallPeripheral(conn, "minecraft:barrel_0", "size")
			log.Debug(string(s.Result))
			i := []int{}
			err = json.Unmarshal(s.Result, &i)
			if err != nil {
				log.Error(err)
			}
			log.Debug(i[0])
		}()*/

		for {
			r := Response{}
			err = conn.ReadJSON(&r)
			if err != nil {
				log.Error(err)
				return
			}
			log.Debug("Response ", "response", r)
			if ch, ok := c.respChans[r.Id]; ok {
				ch <- r
			}
		}

	})

	factory.FactoryConfig{}.
		Build(func(f *factory.Factory) {

		})

	log.Info("Listening on http://localhost:" + c.Port)
	http.ListenAndServe(":"+c.Port, nil)
}

func (c *ServerConfig) LogMessage(conn *websocket.Conn, str string, color int) *Response {
	log.Debug("LogMessage")
	id := c.nextId
	c.nextId++

	respCh := make(chan Response)
	c.respChans[id] = respCh

	conn.WriteJSON(&Request{
		Id:   id,
		Type: "log",
		Args: []any{struct {
			Text  string `json:"text"`
			Color int    `json:"color"`
		}{str, color}},
	})

	resp := <-respCh
	delete(c.respChans, id)
	return &resp
}

func (c *ServerConfig) CallPeripheral(conn *websocket.Conn, args ...any) *Response {
	log.Debug("CallPeripheral")
	id := c.nextId
	c.nextId++

	respCh := make(chan Response)
	c.respChans[id] = respCh

	conn.WriteJSON(&Request{
		Id:   id,
		Type: "peripheral",
		Args: args,
	})

	log.Debug("CallPeripheral")
	resp := <-respCh
	log.Debug("CallPeripheral")
	delete(c.respChans, id)
	return &resp
}
